<project name="griffon-unit-test">

  <condition property="_skipTests_">
    <istrue value="${skipTests}"/>
  </condition>

	<target name="test-with-coverage" depends="build-test, instrument-for-coverage, run-test,test-report,coverage-report" description="Compile and Run the unit tests while measuring coverage">
		<fail if="griffon.test.failure">The tests failed. Have a look at ${griffon.test.reports}</fail>
	</target>
	<target name="test" depends="clean-instrumented, run-test,test-report" unless="_skipTests_" description="Compile and Run the unit tests plainly">
		<fail if="griffon.test.failure">The tests failed. Have a look at ${griffon.test.reports}</fail>
	</target>

	<!--<taskdef resource="tasks.properties">-->
		<!--<classpath>-->
			<!--<pathelement path="${griffon.build}" />-->
			<!--<fileset dir="cruise/coverage/lib" includes="*.jar" />-->
		<!--</classpath>-->
		<!--<classpath refid="classpath" />-->
	<!--</taskdef>-->
	<!--<taskdef name="groovyc" classname="org.codehaus.groovy.ant.Groovyc">-->
		<!--<classpath refid="classpath" />-->
	<!--</taskdef>-->


	<property name="coverage.build" value="cruise/coverage/build/instrumented-classes" />
	<property name="coverage.report" value="cruise/coverage/report" />

	<target name="clean-instrumented">
		<!--<delete quiet="true" dir="${coverage.build}" />-->
		<!--<mkdir dir="${coverage.build}" />-->
	</target>

	<target name="instrument-for-coverage" depends="clean-instrumented">
		<!--<delete file="cobertura.ser" quiet="true" />-->
		<!--<cobertura-instrument todir="${coverage.build}">-->
			<!--<fileset dir="${griffon.build}" includes="**/*.class" />-->
		<!--</cobertura-instrument>-->
	</target>

	<target name="coverage-report">
		<!--<delete quiet="true">-->
			<!--<fileset dir="${coverage.report}" />-->
		<!--</delete>-->
		<!--<mkdir dir="${coverage.report}" />-->
		<!--<cobertura-report format="html" destdir="cruise/coverage/report">-->
			<!--<fileset dir="${griffon.src.commons}" />-->
			<!--<fileset dir="${griffon.src.groovy}" />-->
			<!--<fileset dir="${griffon.src.web}" />-->
			<!--<fileset dir="${griffon.src.persistence}" />-->
			<!--<fileset dir="${griffon.src.scaffolding}" />-->
		<!--</cobertura-report>-->
	</target>

	<target name="build-test" depends="build,build-scripts">

		<groovyc destdir="${griffon.test.build}" fork="true" >
            <src path="${griffon.test.src.cli}" />
            <src path="${griffon.test.src.rt}" />
            <!--<src path="${griffon.test.src.commons}" />-->
            <!--<src path="${griffon.test.src.web}" />-->
            <!--<src path="${griffon.test.src.persistence}" />-->
            <!--<src path="${griffon.test.src.scaffolding}" />-->
            <!--<src path="test/groovy" />-->
            <javac debug="on" deprecation="on" encoding="UTF-8"/>
            <classpath refid="classpath" />
			<classpath location="${griffon.test.build}" />
            <classpath location="${griffon.build.cli}" />
            <classpath location="${griffon.build.rt}" />
			<!--<classpath location="${griffon.build}" />-->
		</groovyc>
        <copy todir="${griffon.test.build}">
            <fileset dir="${griffon.test.src.cli}" excludes="**/*.java,**/*.groovy"/>
            <fileset dir="${griffon.test.src.rt}" excludes="**/*.java,**/*.groovy"/>
        </copy>

        <antcall target="build-test:java5" />
    </target>

    <target name="build-test:java5" depends="build:checkj5" if="is.java.5">
        <!--build java 5 sources-->
        <!--<echo>Building Java 5 Test Sources</echo>-->
        <!--<groovyc destdir="${griffon.test.build}" encoding="UTF-8">-->
            <!--<src path="test/tiger" />-->
            <!--<javac debug="on" deprecation="on" encoding="UTF-8"/>-->
            <!--<classpath location="${griffon.test.build}" />-->
            <!--<classpath location="${griffon.build}" />-->
   			<!--<classpath refid="classpath"/>-->
		<!--</groovyc>-->
    </target>

    <target name="defineTestingScope">
		<!--Sets the test value to all tests ('*') if no value is provided-->
		<condition property="test" value="*">
			<not>
				<isset property="test" />
			</not>
		</condition>
		<condition property="test.isolated" value="true">
			<equals arg1="${test}" arg2="*" />
		</condition>
	</target>

    <target name="junit-macro" depends="junit-macro-vfb,junit-macro-novfb"/>

    <target name="junit-macro-vfb" if="junit.xvfb">
        <macrodef name="grifjunit">
            <element name="junit-elements" implicit="true"/>
            <attribute name="fork" default="yes"/>
            <attribute name="maxmemory" default="512m"/>
            <attribute name="forkmode" default="once"/>
            <attribute name="printsummary" default="true"/>
            <sequential>
                <property name="xvfb.display" value="89"/>
                <tempfile property="xauth.file" deleteonexit="true" prefix="xauth"/>
                <echo file="${xauth.file}">localhost
</echo>
                <parallel>
                  <exec executable="Xvfb">
                    <arg value=":${xvfb.display}"/>
                    <arg value="-auth"/>
                    <arg value="${xauth.file}"/>
                  </exec>
                  <sequential>
                    <sleep seconds="1"/> <!-- sleep so Xvfb can start -->
                    <junit fork="@{fork}" maxmemory="@{maxmemory}" forkmode="@{forkmode}" printsummary="@{printsummary}">
                      <env key="DISPLAY" value=":${xvfb.display}"/>
                      <junit-elements/>
                    </junit>
                    <exec executable="pkill">
                      <arg line="-9 Xvfb"/>
                    </exec>
                  </sequential>
                </parallel>
            </sequential>
        </macrodef>
    </target>

    <target name="junit-macro-novfb" unless="junit.xvfb">
        <macrodef name="grifjunit">
            <element name="junit-elements" implicit="true"/>
            <attribute name="fork" default="yes"/>
            <attribute name="maxmemory" default="512m"/>
            <attribute name="forkmode" default="once"/>
            <attribute name="printsummary" default="true"/>
            <sequential>
                <junit fork="@{fork}" maxmemory="@{maxmemory}" forkmode="@{forkmode}" printsummary="@{printsummary}">
                    <sysproperty key="apple.awt.UIElement" value="true"/>
                    <junit-elements/>
                </junit>
            </sequential>
        </macrodef>
    </target>


    <target name="run-test" depends="defineTestingScope, build-test, -jar-app-files, junit-macro" unless="_skipTests_">
        <property name="xvfb-run.bin" value="xvfb-run"/>
		<delete dir="${griffon.test.reports}" />
        <mkdir dir="${griffon.test.reports}" />
        <echo>Test being run ${test} from ${griffon.test.build}</echo>
        <!--<grifjunit fork="true" maxmemory="512m" forkmode="perBatch" clonevm="true" printsummary="on">-->
        <!-- only fork VMs as needed -->
        <grifjunit fork="true" maxmemory="512m" forkmode="once" printsummary="true">
            <sysproperty key="griffon.cli.testing" value="true"/>
            <jvmarg value="-server" />
			<jvmarg value="-Xmx512M" />
			<jvmarg value="-Xms256m" />
			<jvmarg value="-XX:MaxPermSize=256m"/>
            <!--<jvmarg line="-Xdebug -Xrunjdwp:transport=dt_socket,server=y,suspend=y,address=5005"/>-->
            <classpath>
                <pathelement location="${coverage.build}" />
                <!-- must be first in cp!    -->
                <!--<pathelement location="cruise/coverage/lib/cobertura.jar" />-->
                <!-- only needed for coverage -->
                <path refid="classpath" />

                <pathelement  location="${griffon.build.cli}" />
                <pathelement location="${griffon.build.rt}" />
                <pathelement location="${griffon.test.build}" />
                <!--<pathelement location="${griffon.test.src.web}" />-->
                <!--<pathelement location="${griffon.test.src.commons}" />-->
                <!--<pathelement location="${griffon.test.src.persistence}" />-->
                <!--<pathelement location="${griffon.test.src.scaffolding}" />-->
                <!--<pathelement location="${griffon.test.src.groovy}" />-->
                <!--<pathelement location="${griffon.test.src.tiger}" />-->

                <!-- needed to load codecs -->
                <!--<pathelement location="${griffon.src.codecs}" />-->
                <!-- CLI tests require build.properties on the classpath -->
                <pathelement location="." />
                <pathelement location="${griffon.target}" />
            </classpath>

            <formatter type="xml" />
            <batchtest todir="${griffon.test.reports}" failureproperty="griffon.test.failure">
                <fileset dir="${griffon.test.build}">
                    <include name="**/${test}Test.class" />
                    <include name="**/${test}Tests.class" />
                    <exclude name="**/Abstract*" />
                    <exclude name="**/TransactionalServiceReloadTests*" />
                </fileset>
            </batchtest>
		</grifjunit>
	</target>

	<target name="test-report" depends="clean-instrumented, run-test" description="Runs unit tests and generates HTML report">
		<mkdir dir="${griffon.test.html.reports}" />
		<junitreport todir="${griffon.test.html.reports}">
			<fileset dir="${griffon.test.reports}">
				<include name="TEST-*.xml" />
			</fileset>
			<report format="frames" todir="${griffon.test.html.reports}" />
		</junitreport>
		<fail if="griffon.test.failure">The tests failed. Have a look at ${griffon.test.html.reports}/index.html</fail>
	</target>
</project>
